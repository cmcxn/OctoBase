# Nginx configuration for multi-node Keck load balancing
# This configuration distributes WebSocket connections across multiple Keck instances
# while ensuring session affinity for the same roomid

upstream keck_nodes {
    # Use IP hash to ensure sticky sessions for the same client/room
    ip_hash;
    
    # Add your Keck instances here
    server 127.0.0.1:3001 weight=1 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3002 weight=1 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3003 weight=1 max_fails=3 fail_timeout=30s;
    
    # Add more instances as needed
    # server 127.0.0.1:3004 weight=1 max_fails=3 fail_timeout=30s;
    
    # Health check
    keepalive 32;
}

server {
    listen 3000;
    server_name localhost;

    # Logging
    access_log /var/log/nginx/keck_access.log;
    error_log /var/log/nginx/keck_error.log;

    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Disable buffering for real-time WebSocket communication
    proxy_buffering off;
    proxy_cache off;

    # Timeout settings
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Handle WebSocket collaboration endpoints
    location /collaboration/ {
        proxy_pass http://keck_nodes;
        
        # For WebSocket connections, these headers are important
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Pass the original host information
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Handle API endpoints
    location /api/ {
        proxy_pass http://keck_nodes;
        
        # Standard headers for API requests
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check endpoint for load balancer
    location /health {
        proxy_pass http://keck_nodes;
        proxy_set_header Host $http_host;
    }

    # Static files (if any)
    location / {
        proxy_pass http://keck_nodes;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Alternative configuration with path-based routing
# Uncomment this section if you want to route different rooms to specific nodes
# server {
#     listen 3000;
#     server_name localhost;
#
#     # Route specific room patterns to specific nodes
#     location ~ ^/collaboration/room-(.*)$ {
#         set $room_id $1;
#         
#         # Use consistent hashing based on room ID
#         set $backend_server "";
#         set_by_lua $backend_server '
#             local crc32 = ngx.crc32_long(ngx.var.room_id)
#             local node_count = 3  -- Number of Keck nodes
#             local node_index = crc32 % node_count + 1
#             local ports = {3001, 3002, 3003}
#             return "127.0.0.1:" .. ports[node_index]
#         ';
#         
#         proxy_pass http://$backend_server;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#         proxy_set_header Host $host;
#     }
# }